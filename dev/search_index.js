var documenterSearchIndex = {"docs":
[{"location":"#Tutorial-1","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"I'm using the data from the dplyr tutorial. The data is in the test folder of this package. I created it with the following R code:","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"library(nycflights13)\nsetwd(\"C:/Users/hp/.julia/dev/LightQuery/test\")\nwrite.csv(airports, \"airports.csv\", na = \"\", row.names = FALSE)\nwrite.csv(flights, \"flights.csv\", na = \"\", row.names = FALSE)","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Import tools from Dates, TimeZones, and Unitful.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> using LightQuery\n\njulia> using Dates: DateTime, Day\n\njulia> import Dates: Minute\n\njulia> Minute(::Missing) = missing;\n\njulia> using TimeZones: Class, TimeZone, VariableTimeZone, ZonedDateTime\n\njulia> using Unitful: °, ft, mi","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Use CSV.File to import the airports data.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> import CSV\n\njulia> const airports_file = CSV.File(\"airports.csv\",\n            allowmissing = :auto,\n            missingstrings = [\"\", \"\\\\N\"]\n        )\nCSV.File(\"airports.csv\", rows=1458):\nTables.Schema:\n :faa    String\n :name   String\n :lat    Float64\n :lon    Float64\n :alt    Int64\n :tz     Int64\n :dst    String\n :tzone  Union{Missing, String}","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Use named_schema to get an object to convert a table row to a named tuple.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> const Airport = named_schema(airports_file)\n((`faa`, Val{String}()), (`name`, Val{String}()), (`lat`, Val{Float64}()), (`lon`, Val{Float64}()), (`alt`, Val{Int64}()), (`tz`, Val{Int64}()), (`dst`, Val{String}()), (`tzone`, Val{Union{Missing, String}}()))","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"For this package, I've created my own version of NamedTuples. Use @name to work with them.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Read the first row. Use the chaining macro @> to chain calls together.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> airport =\n        @> airports_file |>\n        first |>\n        Airport\n((`faa`, \"04G\"), (`name`, \"Lansdowne Airport\"), (`lat`, 41.1304722), (`lon`, -80.6195833), (`alt`, 1044), (`tz`, -5), (`dst`, \"A\"), (`tzone`, \"America/New_York\"))","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"[rename](@ref.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> airport =\n        @name @> airport |>\n        rename(_,\n            airport_code = :faa,\n            latitude = :lat,\n            longitude = :lon,\n            altitude = :alt,\n            time_zone_offset = :tz,\n            daylight_savings = :dst,\n            time_zone = :tzone\n        )\n((`name`, \"Lansdowne Airport\"), (`airport_code`, \"04G\"), (`latitude`, 41.1304722), (`longitude`, -80.6195833), (`altitude`, 1044), (`time_zone_offset`, -5), (`daylight_savings`, \"A\"), (`time_zone`, \"America/New_York\"))","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"[transform] time_zone into a TimeZone. Note the data contains some LEGACY timezones. Use a type annotation: TimeZone is unstable without it.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> const time_zone_classes = Class(:STANDARD) | Class(:LEGACY);\n\njulia> airport =\n        @name @> airport |>\n        transform(_,\n            time_zone = TimeZone(_.time_zone, time_zone_classes)::VariableTimeZone\n        )\n((`name`, \"Lansdowne Airport\"), (`airport_code`, \"04G\"), (`latitude`, 41.1304722), (`longitude`, -80.6195833), (`altitude`, 1044), (`time_zone_offset`, -5), (`daylight_savings`, \"A\"), (`time_zone`, tz\"America/New_York\"))","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"remove data contingent on timezone.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> airport =\n        @name @> airport |>\n        remove(_,\n            :time_zone_offset,\n            :daylight_savings\n        )\n((`name`, \"Lansdowne Airport\"), (`airport_code`, \"04G\"), (`latitude`, 41.1304722), (`longitude`, -80.6195833), (`altitude`, 1044), (`time_zone`, tz\"America/New_York\"))","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Add units.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> airport =\n        @name @> airport |>\n        transform(_,\n            latitude = _.latitude * °,\n            longitude = _.longitude * °,\n            altitude = _.altitude * ft\n        )\n((`name`, \"Lansdowne Airport\"), (`airport_code`, \"04G\"), (`time_zone`, tz\"America/New_York\"), (`latitude`, 41.1304722°), (`longitude`, -80.6195833°), (`altitude`, 1044 ft))","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"All together:","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> function process_airport(row)\n            @name @> row |>\n            Airport |>\n            rename(_,\n                airport_code = :faa,\n                latitude = :lat,\n                longitude = :lon,\n                altitude = :alt,\n                time_zone_offset = :tz,\n                daylight_savings = :dst,\n                time_zone = :tzone\n            ) |>\n            transform(_,\n                time_zone =\n                    if _.time_zone === missing\n                        missing\n                    else\n                        TimeZone(_.time_zone, time_zone_classes)::VariableTimeZone\n                    end,\n                latitude = _.latitude * °,\n                longitude = _.longitude * °,\n                altitude = _.altitude * ft\n            ) |>\n            remove(_,\n                :time_zone_offset,\n                :daylight_savings\n            )\n        end;","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Use over to lazily map.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> airports =\n        @> airports_file |>\n        over(_, process_airport);","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Call make_columns then to_rows to store the data column-wise but view it row-wise.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> airports =\n        airports |>\n        make_columns |>\n        to_rows;","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Peek.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> Peek(airports)\nShowing 4 of 1458 rows\n|                        `name` | `airport_code` |                    `time_zone` |  `latitude` |  `longitude` | `altitude` |\n| -----------------------------:| --------------:| ------------------------------:| -----------:| ------------:| ----------:|\n|             Lansdowne Airport |            04G | America/New_York (UTC-5/UTC-4) | 41.1304722° | -80.6195833° |    1044 ft |\n| Moton Field Municipal Airport |            06A |  America/Chicago (UTC-6/UTC-5) | 32.4605722° | -85.6800278° |     264 ft |\n|           Schaumburg Regional |            06C |  America/Chicago (UTC-6/UTC-5) | 41.9893408° | -88.1012428° |     801 ft |\n|               Randall Airport |            06N | America/New_York (UTC-5/UTC-4) |  41.431912° | -74.3915611° |     523 ft |","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"index airports by code.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> const indexed_airports =\n        @name @> airports |>\n        index(_, :airport_code);\n\njulia> indexed_airports[\"JFK\"]\n((`name`, \"John F Kennedy Intl\"), (`airport_code`, \"JFK\"), (`time_zone`, tz\"America/New_York\"), (`latitude`, 40.639751°), (`longitude`, -73.778925°), (`altitude`, 13 ft))","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Use CSV.File to import the flights data.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> const flights_file = CSV.File(\"flights.csv\", allowmissing = :auto)\nCSV.File(\"flights.csv\", rows=336776):\nTables.Schema:\n :year            Int64\n :month           Int64\n :day             Int64\n :dep_time        Union{Missing, Int64}\n :sched_dep_time  Int64\n :dep_delay       Union{Missing, Int64}\n :arr_time        Union{Missing, Int64}\n :sched_arr_time  Int64\n :arr_delay       Union{Missing, Int64}\n :carrier         String\n :flight          Int64\n :tailnum         Union{Missing, String}\n :origin          String\n :dest            String\n :air_time        Union{Missing, Int64}\n :distance        Int64\n :hour            Int64\n :minute          Int64\n :time_hour       String\n\njulia> const Flight = named_schema(flights_file);","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Read and rename the first flight.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> flight =\n        @name @> flights_file |>\n        first |>\n        Flight |>\n        rename(_,\n            departure_time = :dep_time,\n            scheduled_departure_time = :sched_dep_time,\n            departure_delay = :dep_delay,\n            arrival_time = :arr_time,\n            scheduled_arrival_time = :sched_arr_time,\n            arrival_delay = :arr_delay,\n            tail_number = :tailnum,\n            destination = :dest\n        )\n((`year`, 2013), (`month`, 1), (`day`, 1), (`carrier`, \"UA\"), (`flight`, 1545), (`origin`, \"EWR\"), (`air_time`, 227), (`distance`, 1400), (`hour`, 5), (`minute`, 15), (`time_hour`, \"2013-01-01 05:00:00\"), (`departure_time`, 517), (`scheduled_departure_time`, 515), (`departure_delay`, 2), (`arrival_time`, 830), (`scheduled_arrival_time`, 819), (`arrival_delay`, 11), (`tail_number`, \"N14228\"), (`destination`, \"IAH\"))","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Use airports data to add timezones.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> scheduled_departure_time = @name ZonedDateTime(\n            DateTime(flight.year, flight.month, flight.day, flight.hour, flight.minute),\n            indexed_airports[flight.origin].time_zone\n        )\n2013-01-01T05:15:00-05:00","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Not all destination airports are not in the flights data, and not all airports have time zone data. Use divrem(_, 100) to split the arrival time (818 -> 8:18). If it was an overnight flight, add a day to the arrival time.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> destination_airport =\n        @name get(indexed_airports, flight.destination, missing);\n\njulia> scheduled_arrival_time =\n            if destination_airport === missing\n                missing\n            else\n                if @name destination_airport.time_zone === missing\n                    missing\n                else\n                    maybe_arrival_time = @name ZonedDateTime(\n                        DateTime(flight.year, flight.month, flight.day, divrem(flight.scheduled_arrival_time, 100)...),\n                        destination_airport.time_zone\n                    )\n                    if maybe_arrival_time < scheduled_departure_time\n                        maybe_arrival_time + Day(1)\n                    else\n                        maybe_arrival_time\n                    end\n                end\n            end\n2013-01-01T08:19:00-06:00","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Add times and units and remove redundant varibbles.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> flight =\n        @name @> flight |>\n        transform(_,\n            scheduled_departure_time = scheduled_departure_time,\n            scheduled_arrival_time = scheduled_arrival_time,\n            air_time = Minute(_.air_time),\n            distance = _.distance * mi,\n            departure_delay = Minute(_.departure_delay),\n            arrival_delay = Minute(_.arrival_delay)\n        ) |>\n        remove(_,\n            :year,\n            :month,\n            :day,\n            :hour,\n            :minute,\n            :time_hour,\n            :departure_time,\n            :arrival_time\n        )\n((`carrier`, \"UA\"), (`flight`, 1545), (`origin`, \"EWR\"), (`tail_number`, \"N14228\"), (`destination`, \"IAH\"), (`scheduled_departure_time`, ZonedDateTime(2013, 1, 1, 5, 15, tz\"America/New_York\")), (`scheduled_arrival_time`, ZonedDateTime(2013, 1, 1, 8, 19, tz\"America/Chicago\")), (`air_time`, 227 minutes), (`distance`, 1400 mi), (`departure_delay`, 2 minutes), (`arrival_delay`, 11 minutes))","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"All together:","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> function process_flight(row)\n            flight =\n                @name @> row |>\n                Flight |>\n                rename(_,\n                    departure_time = :dep_time,\n                    scheduled_departure_time = :sched_dep_time,\n                    departure_delay = :dep_delay,\n                    arrival_time = :arr_time,\n                    scheduled_arrival_time = :sched_arr_time,\n                    arrival_delay = :arr_delay,\n                    tail_number = :tailnum,\n                    destination = :dest\n                )\n            scheduled_departure_time =\n                @name ZonedDateTime(\n                    DateTime(flight.year, flight.month, flight.day, flight.hour, flight.minute),\n                    indexed_airports[flight.origin].time_zone\n                )\n            destination_airport = @name get(indexed_airports, flight.destination, missing)\n            scheduled_arrival_time =\n                if destination_airport === missing\n                    missing\n                else\n                    if @name destination_airport.time_zone === missing\n                        missing\n                    else\n                        maybe_arrival_time = @name ZonedDateTime(\n                            DateTime(flight.year, flight.month, flight.day, divrem(flight.scheduled_arrival_time, 100)...),\n                            destination_airport.time_zone\n                        )\n                        if maybe_arrival_time < scheduled_departure_time\n                            maybe_arrival_time + Day(1)\n                        else\n                            maybe_arrival_time\n                        end\n                    end\n                end\n            @name @> flight |>\n            transform(_,\n                scheduled_departure_time = scheduled_departure_time,\n                scheduled_arrival_time = scheduled_arrival_time,\n                air_time = Minute(_.air_time),\n                distance = _.distance * mi,\n                departure_delay = Minute(_.departure_delay),\n                arrival_delay = Minute(_.arrival_delay)\n            ) |>\n            remove(_,\n                :year,\n                :month,\n                :day,\n                :hour,\n                :minute,\n                :time_hour,\n                :departure_time,\n                :arrival_time\n            )\n        end;\n\njulia> flights =\n        @> flights_file |>\n        over(_, process_flight) |>\n        make_columns |>\n        to_rows;\n\njulia> Peek(flights)\nShowing 4 of 336776 rows\n| `carrier` | `flight` | `origin` | `tail_number` | `destination` | `scheduled_departure_time` |  `scheduled_arrival_time` |  `air_time` | `distance` | `departure_delay` | `arrival_delay` |\n| ---------:| --------:| --------:| -------------:| -------------:| --------------------------:| -------------------------:| -----------:| ----------:| -----------------:| ---------------:|\n|        UA |     1545 |      EWR |        N14228 |           IAH |  2013-01-01T05:15:00-05:00 | 2013-01-01T08:19:00-06:00 | 227 minutes |    1400 mi |         2 minutes |      11 minutes |\n|        UA |     1714 |      LGA |        N24211 |           IAH |  2013-01-01T05:29:00-05:00 | 2013-01-01T08:30:00-06:00 | 227 minutes |    1416 mi |         4 minutes |      20 minutes |\n|        AA |     1141 |      JFK |        N619AA |           MIA |  2013-01-01T05:40:00-05:00 | 2013-01-01T08:50:00-05:00 | 160 minutes |    1089 mi |         2 minutes |      33 minutes |\n|        B6 |      725 |      JFK |        N804JB |           BQN |  2013-01-01T05:45:00-05:00 |                   missing | 183 minutes |    1576 mi |         -1 minute |     -18 minutes |","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Theoretically, the distances between two airports is always the same. Make sure this is the case in our data. First, order by origin, destination, and distance. Then Group By the same variables.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> paths_grouped =\n        @name @> flights |>\n        order(_, (:origin, :destination, :distance)) |>\n        Group(By(_, (:origin, :destination, :distance)));","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Each Group contains a key and value","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> path = first(paths_grouped);\n\njulia> key(path)\n((`origin`, \"EWR\"), (`destination`, \"ALB\"), (`distance`, 143 mi))\n\njulia> value(path) |> Peek\nShowing 4 of 439 rows\n| `carrier` | `flight` | `origin` | `tail_number` | `destination` | `scheduled_departure_time` |  `scheduled_arrival_time` | `air_time` | `distance` | `departure_delay` | `arrival_delay` |\n| ---------:| --------:| --------:| -------------:| -------------:| --------------------------:| -------------------------:| ----------:| ----------:| -----------------:| ---------------:|\n|        EV |     4112 |      EWR |        N13538 |           ALB |  2013-01-01T13:17:00-05:00 | 2013-01-01T14:23:00-05:00 | 33 minutes |     143 mi |        -2 minutes |     -10 minutes |\n|        EV |     3260 |      EWR |        N19554 |           ALB |  2013-01-01T16:21:00-05:00 | 2013-01-01T17:24:00-05:00 | 36 minutes |     143 mi |        34 minutes |      40 minutes |\n|        EV |     4170 |      EWR |        N12540 |           ALB |  2013-01-01T20:04:00-05:00 | 2013-01-01T21:12:00-05:00 | 31 minutes |     143 mi |        52 minutes |      44 minutes |\n|        EV |     4316 |      EWR |        N14153 |           ALB |  2013-01-02T13:27:00-05:00 | 2013-01-02T14:33:00-05:00 | 33 minutes |     143 mi |         5 minutes |     -14 minutes |","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"All we need is the key.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> paths =\n        @> paths_grouped |>\n        over(_, key) |>\n        make_columns |>\n        to_rows;\n\njulia> Peek(paths)\nShowing 4 of 226 rows\n| `origin` | `destination` | `distance` |\n| --------:| -------------:| ----------:|\n|      EWR |           ALB |     143 mi |\n|      EWR |           ANC |    3370 mi |\n|      EWR |           ATL |     746 mi |\n|      EWR |           AUS |    1504 mi |","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"The data is already sorted by origin and destination, so that for our second Group, we don't need to order first. Use [@_] to create an anonymous function.","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> distinct_distances =\n        @name @> paths |>\n        Group(By(_, (:origin, :destination))) |>\n        over(_, @_ transform(key(_),\n            number = length(value(_))\n        ));\n\njulia> Peek(distinct_distances)\nShowing at most 4 rows\n| `origin` | `destination` | `number` |\n| --------:| -------------:| --------:|\n|      EWR |           ALB |        1 |\n|      EWR |           ANC |        1 |\n|      EWR |           ATL |        1 |\n|      EWR |           AUS |        1 |","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"See when there are multiple distances for the same path:","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> @name @> distinct_distances |>\n        when(_, @_ _.number != 1) |>\n        Peek\nShowing at most 4 rows\n| `origin` | `destination` | `number` |\n| --------:| -------------:| --------:|\n|      EWR |           EGE |        2 |\n|      JFK |           EGE |        2 |","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"Peek at flights going to \"EGE\".","category":"page"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"julia> @name @> flights |>\n        when(_, @_ _.destination == \"EGE\") |>\n        Peek\nShowing at most 4 rows\n| `carrier` | `flight` | `origin` | `tail_number` | `destination` | `scheduled_departure_time` |  `scheduled_arrival_time` |  `air_time` | `distance` | `departure_delay` | `arrival_delay` |\n| ---------:| --------:| --------:| -------------:| -------------:| --------------------------:| -------------------------:| -----------:| ----------:| -----------------:| ---------------:|\n|        UA |     1597 |      EWR |        N27733 |           EGE |  2013-01-01T09:28:00-05:00 | 2013-01-01T12:20:00-07:00 | 287 minutes |    1726 mi |        -2 minutes |      13 minutes |\n|        AA |      575 |      JFK |        N5DRAA |           EGE |  2013-01-01T17:00:00-05:00 | 2013-01-01T19:50:00-07:00 | 280 minutes |    1747 mi |        -5 minutes |       3 minutes |\n|        UA |     1597 |      EWR |        N24702 |           EGE |  2013-01-02T09:28:00-05:00 | 2013-01-02T12:20:00-07:00 | 261 minutes |    1726 mi |          1 minute |       3 minutes |\n|        AA |      575 |      JFK |        N631AA |           EGE |  2013-01-02T17:00:00-05:00 | 2013-01-02T19:50:00-07:00 | 260 minutes |    1747 mi |         5 minutes |      16 minutes |","category":"page"},{"location":"#Interface-1","page":"Tutorial","title":"Interface","text":"","category":"section"},{"location":"#Macros-1","page":"Tutorial","title":"Macros","text":"","category":"section"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"@_\n@>\n@name","category":"page"},{"location":"#LightQuery.@_","page":"Tutorial","title":"LightQuery.@_","text":"macro _(body)\n\nTerser function syntax. The arguments are inside the body; the first argument is _, the second argument is __, etc.\n\njulia> using LightQuery\n\njulia> (@_ _ + 1)(1)\n2\n\njulia> map((@_ __ - _), (1, 2), (2, 1))\n(1, -1)\n\n\n\n\n\n","category":"macro"},{"location":"#LightQuery.@>","page":"Tutorial","title":"LightQuery.@>","text":"macro >(body)\n\nIf body is in the form object_ |> call_, call @_ on tail, and recur on head.\n\njulia> using LightQuery\n\njulia> @> 0 |> _ - 1 |> abs\n1\n\n\n\n\n\n","category":"macro"},{"location":"#LightQuery.@name","page":"Tutorial","title":"LightQuery.@name","text":"macro name(code)\n\nSwitch to a native representation of named tuples based on typed Names. Names can be used as indices, keywords, functions, or properties.\n\njulia> using LightQuery\n\njulia> @name :a\n`a`\n\njulia> row = @name (a = 1, b = 2, c = 3)\n((`a`, 1), (`b`, 2), (`c`, 3))\n\njulia> @name row[:a]\n1\n\njulia> @name (:a)(row)\n1\n\njulia> @name row.a\n1\n\njulia> @name row[(:a, :b)]\n((`a`, 1), (`b`, 2))\n\njulia> @name (1, 2)[(:a, :b)]\n((`a`, 1), (`b`, 2))\n\njulia> @name (:a, :b)(row)\n((`a`, 1), (`b`, 2))\n\njulia> @name (:a, :b)((1, 2))\n((`a`, 1), (`b`, 2))\n\n\n\n\n\n","category":"macro"},{"location":"#Columns-1","page":"Tutorial","title":"Columns","text":"","category":"section"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"rename\ntransform\nremove\ngather\nspread\nnamed_schema","category":"page"},{"location":"#LightQuery.rename","page":"Tutorial","title":"LightQuery.rename","text":"rename(row, new_name_old_names...)\n\nRename row.\n\njulia> using LightQuery\n\njulia> @name rename((a = 1, b = 2), c = :a)\n((`b`, 2), (`c`, 1))\n\n\n\n\n\n","category":"function"},{"location":"#LightQuery.transform","page":"Tutorial","title":"LightQuery.transform","text":"transform(old_row, new_row...)\n\nMerge new_row into old_row, overwriting old values.\n\njulia> using LightQuery\n\njulia> @name transform((a = 1, b = 2), a = 3)\n((`b`, 2), (`a`, 3))\n\n\n\n\n\n","category":"function"},{"location":"#LightQuery.remove","page":"Tutorial","title":"LightQuery.remove","text":"remove(row, old_names...)\n\nRemove old_names from row.\n\njulia> using LightQuery\n\njulia> @name remove((a = 1, b = 2, c = 3), :b)\n((`a`, 1), (`c`, 3))\n\n\n\n\n\n","category":"function"},{"location":"#LightQuery.gather","page":"Tutorial","title":"LightQuery.gather","text":"gather(row, new_name_old_names...)\n\nFor each new_name, old_names pair in new_name_old_names, gather the old_names into a single new_name. Inverse of spread.\n\njulia> using LightQuery\n\njulia> @name gather((a = 1, b = 2, c = 3), d = (:a, :c))\n((`b`, 2), (`d`, ((`a`, 1), (`c`, 3))))\n\n\n\n\n\n","category":"function"},{"location":"#LightQuery.spread","page":"Tutorial","title":"LightQuery.spread","text":"spread(row, some_names...)\n\nUnnest nested named tuples. Inverse of gather.\n\njulia> using LightQuery\n\njulia> @name spread((b = 2, d = (a = 1, c = 3)), :d)\n((`b`, 2), (`a`, 1), (`c`, 3))\n\n\n\n\n\n","category":"function"},{"location":"#LightQuery.named_schema","page":"Tutorial","title":"LightQuery.named_schema","text":"named_schema(table)\n\nGet the named_schema of a it. Can be used as a function.\n\njulia> using LightQuery\n\njulia> import CSV\n\njulia> file = CSV.File(\"test.csv\");\n\njulia> f = named_schema(file)\n((`a`, Val{Union{Missing, Int64}}()), (`b`, Val{Union{Missing, Float64}}()))\n\njulia> f(first(file))\n((`a`, 1), (`b`, 1.0))\n\n\n\n\n\n","category":"function"},{"location":"#Rows-1","page":"Tutorial","title":"Rows","text":"","category":"section"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"unzip\nEnumerated\nover\nindex\nwhen\norder\nBy\nGroup\nkey\nvalue\nJoin\nLength","category":"page"},{"location":"#LightQuery.unzip","page":"Tutorial","title":"LightQuery.unzip","text":"unzip(rows, number_of_columns = number_of_columns(rows))\n\nUnzip an iterator rows which returns tuples of length number_of_columns.\n\njulia> using LightQuery\n\njulia> unzip([(1, 1.0), (2, 2.0)])\n([1, 2], [1.0, 2.0])\n\n\n\n\n\n","category":"function"},{"location":"#LightQuery.Enumerated","page":"Tutorial","title":"LightQuery.Enumerated","text":"Enumerated{Iterator}\n\nRelies on the fact that iteration states can be converted to indices; thus, you might have to define LightQuery.state_to_index for unrecognized types. \"Sees through\" some iterators like Filter.\n\njulia> using LightQuery\n\njulia> collect(Enumerated(when([4, 3, 2, 1], iseven)))\n2-element Array{Tuple{Int64,Int64},1}:\n (1, 4)\n (3, 2)\n\n\n\n\n\n","category":"type"},{"location":"#LightQuery.over","page":"Tutorial","title":"LightQuery.over","text":"over(iterator, call)\n\nLazy map with argument order reversed.\n\n\n\n\n\n","category":"function"},{"location":"#LightQuery.index","page":"Tutorial","title":"LightQuery.index","text":"index(iterator, key)\n\nIndex iterator by the results of key. Relies on Enumerated.\n\njulia> using LightQuery\n\njulia> result = @name index(\n            [\n                (item = \"b\", index = 2),\n                (item = \"a\", index = 1)\n            ],\n            :index\n        );\n\njulia> result[1]\n((`item`, \"a\"), (`index`, 1))\n\n\n\n\n\n","category":"function"},{"location":"#LightQuery.when","page":"Tutorial","title":"LightQuery.when","text":"when(iterator, call)\n\nLazy filter with argument order reversed.\n\n\n\n\n\n","category":"function"},{"location":"#LightQuery.order","page":"Tutorial","title":"LightQuery.order","text":"order(unordered, key; keywords...)\n\nGeneralized sort. keywords will be passed to sort!; see the documentation there for options. See By for a way to explicitly mark that an object has been sorted. Relies on Enumerated.\n\njulia> using LightQuery\n\njulia> @name order([\n            (item = \"b\", index = 2),\n            (item = \"a\", index = 1)\n        ], :index)\n2-element view(::Array{Tuple{Tuple{LightQuery.Name{:item},String},Tuple{LightQuery.Name{:index},Int64}},1}, [2, 1]) with eltype Tuple{Tuple{LightQuery.Name{:item},String},Tuple{LightQuery.Name{:index},Int64}}:\n ((`item`, \"a\"), (`index`, 1))\n ((`item`, \"b\"), (`index`, 2))\n\n\n\n\n\n","category":"function"},{"location":"#LightQuery.By","page":"Tutorial","title":"LightQuery.By","text":"By(iterator, key)\n\nMark that iterator has been pre-sorted by key. For use with Group or Join.\n\njulia> using LightQuery\n\njulia> @name By([\n            (item = \"a\", index = 1),\n            (item = \"b\", index = 2)\n        ], :index);\n\n\n\n\n\n","category":"type"},{"location":"#LightQuery.Group","page":"Tutorial","title":"LightQuery.Group","text":"Group(ungrouped::By)\n\nGroup consecutive keys in ungrouped. Requires a presorted object (see By). Relies on Enumerated.\n\njulia> using LightQuery\n\njulia> @name Group(By(\n            [\n                (item = \"a\", group = 1),\n                (item = \"b\", group = 1),\n                (item = \"c\", group = 2),\n                (item = \"d\", group = 2)\n            ],\n            :group\n        )) |>\n        collect\n2-element Array{Pair{Int64,SubArray{Tuple{Tuple{LightQuery.Name{:item},String},Tuple{LightQuery.Name{:group},Int64}},1,Array{Tuple{Tuple{LightQuery.Name{:item},String},Tuple{LightQuery.Name{:group},Int64}},1},Tuple{UnitRange{Int64}},true}},1}:\n 1 => [((`item`, \"a\"), (`group`, 1)), ((`item`, \"b\"), (`group`, 1))]\n 2 => [((`item`, \"c\"), (`group`, 2)), ((`item`, \"d\"), (`group`, 2))]\n\n\n\n\n\n","category":"type"},{"location":"#LightQuery.key","page":"Tutorial","title":"LightQuery.key","text":"key(pair)\n\nThe key in a key => value pair.\n\n\n\n\n\n","category":"function"},{"location":"#LightQuery.value","page":"Tutorial","title":"LightQuery.value","text":"value(pair)\n\nThe value in a key => value pair.\n\n\n\n\n\n","category":"function"},{"location":"#LightQuery.Join","page":"Tutorial","title":"LightQuery.Join","text":"Join(left::By, right::By)\n\nFind all pairs where isequal(left.key(left.iterator), right.key(right.iterator)).\n\njulia> using LightQuery\n\njulia> @name Join(\n            By(\n                [\n                    (left = \"a\", index = 1),\n                    (left = \"b\", index = 2),\n                    (left = \"e\", index = 5),\n                    (left = \"f\", index = 6)\n                ],\n                :index\n            ),\n            By(\n                [\n                    (right = \"a\", index = 1),\n                    (right = \"c\", index = 3),\n                    (right = \"d\", index = 4),\n                    (right = \"e\", index = 6)\n                ],\n                :index\n            )\n        ) |>\n        collect\n6-element Array{Pair{Union{Missing, Tuple{Tuple{Name{:left},String},Tuple{Name{:index},Int64}}},Union{Missing, Tuple{Tuple{Name{:right},String},Tuple{Name{:index},Int64}}}},1}:\n ((`left`, \"a\"), (`index`, 1)) => ((`right`, \"a\"), (`index`, 1))\n ((`left`, \"b\"), (`index`, 2)) => missing\n                       missing => ((`right`, \"c\"), (`index`, 3))\n                       missing => ((`right`, \"d\"), (`index`, 4))\n ((`left`, \"e\"), (`index`, 5)) => missing\n ((`left`, \"f\"), (`index`, 6)) => ((`right`, \"e\"), (`index`, 6))\n\nAssumes left and right are both strictly sorted (no repeats). If there are repeats, Group first. For other join flavors, combine with when. Make sure to annotate with Length if you know it.\n\n\n\n\n\n","category":"type"},{"location":"#LightQuery.Length","page":"Tutorial","title":"LightQuery.Length","text":"Length(fixed, length)\n\nAllow optimizations based on length. Especially useful after Join and before make_columns.\n\njulia> using LightQuery\n\njulia> @> Filter(iseven, 1:4) |>\n        Length(_, 2) |>\n        collect\n2-element Array{Int64,1}:\n 2\n 4\n\n\n\n\n\n","category":"type"},{"location":"#Pivot-1","page":"Tutorial","title":"Pivot","text":"","category":"section"},{"location":"#","page":"Tutorial","title":"Tutorial","text":"to_rows\nPeek\nto_columns\nmake_columns","category":"page"},{"location":"#LightQuery.to_rows","page":"Tutorial","title":"LightQuery.to_rows","text":"to_rows(columns)\n\nIterator over rows of a table. Always lazy. Inverse of to_columns. See Peek for a way to view.\n\njulia> using LightQuery\n\njulia> @name collect(to_rows((a = [1, 2], b = [1.0, 2.0])))\n2-element Array{Tuple{Tuple{LightQuery.Name{:a},Int64},Tuple{LightQuery.Name{:b},Float64}},1}:\n ((`a`, 1), (`b`, 1.0))\n ((`a`, 2), (`b`, 2.0))\n\n\n\n\n\n","category":"function"},{"location":"#LightQuery.Peek","page":"Tutorial","title":"LightQuery.Peek","text":"Peek(rows, some_names = item_names(rows); maximum_length = 4)\n\nGet a peek of an iterator which returns items with propertynames. Will show no more than maximum_length rows.\n\njulia> using LightQuery\n\njulia> @name Peek(to_rows((a = 1:5, b = 5:-1:1)))\nShowing 4 of 5 rows\n| `a` | `b` |\n| ---:| ---:|\n|   1 |   5 |\n|   2 |   4 |\n|   3 |   3 |\n|   4 |   2 |\n\n\n\n\n\n","category":"type"},{"location":"#LightQuery.to_columns","page":"Tutorial","title":"LightQuery.to_columns","text":"to_columns(rows)\n\nInverse of to_rows. Always lazy, see make_columns for eager version.\n\njulia> using LightQuery\n\njulia> @name to_columns(to_rows((a = [1, 2], b = [1.0, 2.0])))\n((`a`, [1, 2]), (`b`, [1.0, 2.0]))\n\n\n\n\n\n","category":"function"},{"location":"#LightQuery.make_columns","page":"Tutorial","title":"LightQuery.make_columns","text":"make_columns(rows, some_names = item_names(rows))\n\nCollect into columns with some_names. Always eager, see to_columns for lazy version.\n\njulia> using LightQuery\n\njulia> rows = @name [(a = 1, b = 1.0), (a = 2, b = 2.0)];\n\njulia> make_columns(rows)\n((`a`, [1, 2]), (`b`, [1.0, 2.0]))\n\njulia> empty!(rows);\n\njulia> make_columns(rows)\n((`a`, Int64[]), (`b`, Float64[]))\n\n\n\n\n\n","category":"function"}]
}
